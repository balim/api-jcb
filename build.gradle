apply plugin: "groovy"
apply plugin: "spring-boot"
apply plugin: "application"

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

version = "${version}"
group = "${group}"
mainClassName = "com.jcb.SampleApplication"

buildscript {
    ext {
        springBootVersion = '1.0.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

jar {
    baseName = 'api-service'
    version =  '1.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

task runBundled(type:Exec){
    commandLine "java -jar build/libs/api-service-1.0.0.jar".split(' ')
}

task copyToLib << {
    copy {
        from configurations.runtime.copy().setTransitive(false)
        into "$buildDir/libs"
        rename { name ->
            def artifacts = configurations.runtime.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.name}.${artifact.extension}"
        }
    }
}

runBundled.dependsOn build
build.mustRunAfter clean

task stage(dependsOn: ['clean', 'build', 'copyToLib'])
